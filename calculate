// WindowsProject.cpp : Defines the entry point for the application.
//

#include "framework.h"
#include "WindowsProject.h"
#include <Windows.h>
#include <CommCtrl.h>
#include <cmath>
#include <cstdio>
#include <cwchar>
#include <iostream>
#include <vector>

// Глобальные переменные
HWND hButtonCalculate;
HWND hStaticResult;
HWND hGraphWindow;

double f(double x) {
    // Функция, для которой мы вычисляем интеграл
    return x * x;
}

double calculateIntegral(double a, double b, double dx) {
    double integral = 0.0;

    for (double x = a; x < b; x += dx) {
        double y = f(x);
        integral += y * dx;
    }

    return integral;
}

void drawGraph(HWND hWnd) {
    PAINTSTRUCT ps;
    HDC hdc = BeginPaint(hWnd, &ps);

    RECT clientRect;
    GetClientRect(hWnd, &clientRect);

    int width = clientRect.right - clientRect.left;
    int height = clientRect.bottom - clientRect.top;

    // Создаем буфер для графика
    HBITMAP hBitmap = CreateCompatibleBitmap(hdc, width, height);
    HDC hdcMem = CreateCompatibleDC(hdc);
    HGDIOBJ hOldBitmap = SelectObject(hdcMem, hBitmap);

    // Задаем цвет и стиль рисования
    SetDCPenColor(hdcMem, RGB(0, 0, 0));
    SetDCBrushColor(hdcMem, RGB(255, 255, 255));
    SelectObject(hdcMem, GetStockObject(DC_PEN));
    SelectObject(hdcMem, GetStockObject(DC_BRUSH));

    // Очищаем окно
    Rectangle(hdcMem, 0, 0, width, height);

    // Рисуем график функции
    double dx = 0.1;
    double a = 1, b = 2.71;
    int graphWidth = static_cast<int>((b - a) / dx);
    std::vector<POINT> points(graphWidth);

    int x = 0;

    for (double i = a; i < b; i += dx) {
        double y = f(i);
        int pixelX = static_cast<int>((i - a) * (width - 1) / (b - a));
        int pixelY = height - static_cast<int>(y * (height - 1));

        points[x].x = pixelX;
        points[x].y = pixelY;

        x++;
    }

    Polyline(hdcMem, points.data(), graphWidth);

    // Выводим график на экран
    BitBlt(hdc, 0, 0, width, height, hdcMem, 0, 0, SRCCOPY);

    // Освобождаем ресурсы
    SelectObject(hdcMem, hOldBitmap);
    DeleteObject(hBitmap);
    DeleteDC(hdcMem);

    EndPaint(hWnd, &ps);
}

LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam) {
    switch (message) {
    case WM_CREATE:
    {
        // Создаем кнопку
        hButtonCalculate = CreateWindow(L"BUTTON", L"Вычислить", WS_CHILD | WS_VISIBLE,
            10, 10, 100, 30, hWnd, NULL, NULL, NULL);

        // Создаем статическое поле для вывода результата
        hStaticResult = CreateWindow(L"STATIC", L"", WS_CHILD | WS_VISIBLE,
            10, 50, 200, 20, hWnd, NULL, NULL, NULL);

        // Создаем окно для графика
        hGraphWindow = CreateWindow(L"STATIC", NULL, WS_CHILD | WS_VISIBLE | SS_BLACKFRAME,
            10, 80, 500, 300, hWnd, NULL, NULL, NULL);

        break;
    }
    case WM_COMMAND:
    {
        if (wParam == (WPARAM)hButtonCalculate) {
            double a = 1.0; // Нижний предел интегрирования
            double b = 2.710; // Верхний предел интегрирования
            double dx = 0.01; // Шаг интегрирования

            // Вычисляем интеграл
            double result = calculateIntegral(a, b, dx);

            // Отображаем результат в статическом тексте
            WCHAR resultText[64];
            swprintf_s(resultText, sizeof(resultText) / sizeof(WCHAR), L"Результат: %.2f", result);
            SetWindowText(hStaticResult, resultText);

            // Рисуем график
            drawGraph(hGraphWindow);
        }
        break;
    }
    case WM_PAINT:
    {
        drawGraph(hWnd);
        break;
    }
    case WM_DESTROY:
        PostQuitMessage(0);
        break;
    default:
        return DefWindowProc(hWnd, message, wParam, lParam);
    }
    return 0;
}

int WINAPI wWinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPWSTR lpCmdLine, int nCmdShow) {
    WNDCLASSEX wc = { 0 };
    wc.cbSize = sizeof(WNDCLASSEX);
    wc.lpfnWndProc = WndProc;
    wc.hInstance = hInstance;
    wc.lpszClassName = L"IntegralCalcWindowClass";
    RegisterClassEx(&wc);

    HWND hWnd = CreateWindow(L"IntegralCalcWindowClass", L"Вычисление интеграла и график функции",
        WS_OVERLAPPEDWINDOW, CW_USEDEFAULT, CW_USEDEFAULT, 600, 400, NULL, NULL, hInstance, NULL);

    if (!hWnd) {
        return -1;
    }

    ShowWindow(hWnd, nCmdShow);
    UpdateWindow(hWnd);

    MSG msg;
    while (GetMessage(&msg, NULL, 0, 0)) {
        TranslateMessage(&msg);
        DispatchMessage(&msg);
    }

    return (int)msg.wParam;
}
